#version 450

layout(set = 0, binding = 0) buffer input_a {
	int input_a_dims;
	int input_a_col;
	int input_a_row;
   	float input_a_data[];
};

layout(set = 1, binding = 0) buffer input_b {
	int input_b_dims;
	int input_b_col;
	int input_b_row;
   	float input_b_data[];
};

layout(set = 2, binding = 0) buffer input_c {
	int input_c_dims;
	int input_c_col;
	int input_c_row;
   	float input_c_data[];
};

layout(set = 3, binding = 0) buffer mat_output {
	int output_dims;
	int output_col;
	int output_row;
   	float output_data[];
};

shared float shared_data[64];

layout (local_size_x = 4, local_size_y = 4, local_size_z = 1) in;

void main() 
{
	uint index_x = gl_GlobalInvocationID.x;
	uint index_y = gl_GlobalInvocationID.y;

	output_dims = input_a_dims;
	output_col = input_b_col;
	output_row = input_a_row;

	if (index_x >= output_row || index_y >= output_col) {
		return;
	}

	shared_data[index_x * output_col + index_y] = 0.0;
	for (uint i = 0; i < input_a_col; ++i) {
		shared_data[index_x * input_b_col + index_y] += input_a_data[index_x * input_a_col + i] *
			input_b_data[i * input_b_col + index_y];
	}

	barrier();
	// memoryBarrier();
	// memoryBarrierShared();
	// groupMemoryBarrier();

	output_data[index_x * output_col + index_y] = 0.0;
	for (uint i = 0; i < input_c_row; ++i) {
		output_data[index_x * output_col + index_y] += shared_data[index_x * input_b_col + i] *
			input_c_data[i * input_c_col + index_y];
	}
}
